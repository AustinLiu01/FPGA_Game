
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module lcd_test(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,
	
	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,
	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW ,
	///////	LED////////
	LEDR
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;
input [17:0] SW;
//////////// KEY //////////
input 		     [3:0]		KEY;
output	[9:0] LEDR;
//////////// SW //////////
//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire[7:0] LCD_D_1;
wire LCD_RS_1;
wire LCD_RW_1;
wire LCD_EN_1;
wire DLY_RST;

wire [9:0] LED_in;
reg [1:0]state;

reg [127:0] m;
wire [127:0] m1,n1;
reg [127:0] n;
wire [79:0] LCD_line2;
//=======================================================
//  Structural coding
//=======================================================

//注意，这里连接SW[17:0]中，SW[0]没有连引脚处于三态，板子上的SW[0]连了RST_N
assign LCD_DATA=LCD_D_1;
assign LCD_RS=LCD_RS_1;
assign LCD_RW=LCD_RW_1;
assign LCD_EN=LCD_EN_1;
assign LCD_ON=1'b1;//默认打开
assign LCD_BLON=1'b0;

assign m1=m;
assign n1=n;

assign LEDR = LED_in;

Reset_Delay r0(.in_CLK(CLOCK_50),	.out_RESET(DLY_RST));


mouse_hole test1(CLOCK_50,SW[9:0],SW[17],LED_in[9:0]);

connect_LED_to_LCD_single U0(CLOCK2_50,LED_in[0],LCD_line2[7:0]);
connect_LED_to_LCD_single U1(CLOCK2_50,LED_in[1],LCD_line2[15:8]);
connect_LED_to_LCD_single U2(CLOCK2_50,LED_in[2],LCD_line2[23:16]);
connect_LED_to_LCD_single U3(CLOCK2_50,LED_in[3],LCD_line2[31:24]);
connect_LED_to_LCD_single U4(CLOCK2_50,LED_in[4],LCD_line2[39:32]);
connect_LED_to_LCD_single U5(CLOCK2_50,LED_in[5],LCD_line2[47:40]);
connect_LED_to_LCD_single U6(CLOCK2_50,LED_in[6],LCD_line2[55:48]);
connect_LED_to_LCD_single U7(CLOCK2_50,LED_in[7],LCD_line2[63:56]);
connect_LED_to_LCD_single U8(CLOCK2_50,LED_in[8],LCD_line2[71:64]);
connect_LED_to_LCD_single U9(CLOCK2_50,LED_in[9],LCD_line2[79:72]);


LCD1602_TEST u1(	//Host Side
				.in_CLK(CLOCK_50),
				.in_RST_N(DLY_RST),
				//LCD Side
				.word_line1(m1),
				.word_line2(n1),
				.LCD_DATA(LCD_D_1),
				.LCD_RW(LCD_RW_1),
				.LCD_EN(LCD_EN_1),
				.LCD_RS(LCD_RS_1),
			);

always@(posedge CLOCK_50)begin
	case(state)
	2'b00:begin
			m <= "WELCOME TO GAME!";
			n <= "                ";
			if(!KEY[0])
				state <= 2'b01;
			end
	2'b01:begin
			m <= "Have a Good Time";
			n <= {LCD_line2[79:72],LCD_line2[71:64],LCD_line2[63:56],
					LCD_line2[55:48],LCD_line2[47:40],LCD_line2[39:32],
					LCD_line2[31:24],LCD_line2[23:16],LCD_line2[15:8],
					LCD_line2[7:0],"      "};
			if(!KEY[1])
				state<= 2'b10;
			end
	2'b10:begin
			m <= "   GAME OVER!   ";
			n <= "   Excellent!   ";
			if(!KEY[2])
				state<= 2'b00;
			end
	endcase
end



endmodule
